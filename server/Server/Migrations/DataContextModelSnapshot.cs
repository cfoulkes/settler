// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfLicences")
                        .HasColumnType("integer");

                    b.Property<long>("RowVer")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgencyStatusId");

                    b.ToTable("Agencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgencyStatusId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6880),
                            Description = "",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6880),
                            Name = "Test Agency 1",
                            NumberOfLicences = 0,
                            RowVer = 0L
                        });
                });

            modelBuilder.Entity("Server.Models.AgencyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RowVer")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AgencyStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6620),
                            Description = "Active",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6620),
                            RowVer = 0L
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6630),
                            Description = "Suspended",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6630),
                            RowVer = 0L
                        });
                });

            modelBuilder.Entity("Server.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("RowVer")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6930),
                            FirstName = "Fred",
                            LastName = "Flintstone",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6930),
                            RowVer = 0u
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6930),
                            FirstName = "Wilma",
                            LastName = "Flintstone",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6930),
                            RowVer = 0u
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6930),
                            FirstName = "Barney",
                            LastName = "Rubble",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6930),
                            RowVer = 0u
                        });
                });

            modelBuilder.Entity("Server.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RowVer")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6660),
                            Description = "Admin",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6660),
                            RowVer = 0L
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6660),
                            Description = "Intake",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6660),
                            RowVer = 0L
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6660),
                            Description = "Manager",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6660),
                            RowVer = 0L
                        });
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("RowVer")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserStatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6690),
                            Email = "",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6690),
                            PasswordHash = "FC57D856266390FBEFE1E3BF64011C538A3CB25C4D048F867998351335F744059D6EB133A85FECC9B2A60088147EDDA18622FA95B3282C30BAAFABC0E1EA9A9D",
                            PasswordSalt = "4A46744489B84AF9679B72BC470BC9401887A7CC2AA76D44CB450197BC05AC04633047A90949826784CD545CFA0885267FA8C1C9AE1918086D92DBC0FB5D64D7",
                            RowVer = 0u,
                            UserStatusId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6850),
                            Email = "",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6850),
                            PasswordHash = "FC57D856266390FBEFE1E3BF64011C538A3CB25C4D048F867998351335F744059D6EB133A85FECC9B2A60088147EDDA18622FA95B3282C30BAAFABC0E1EA9A9D",
                            PasswordSalt = "4A46744489B84AF9679B72BC470BC9401887A7CC2AA76D44CB450197BC05AC04633047A90949826784CD545CFA0885267FA8C1C9AE1918086D92DBC0FB5D64D7",
                            RowVer = 0u,
                            UserStatusId = 1,
                            Username = "all"
                        });
                });

            modelBuilder.Entity("Server.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LanguagePreference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RowVer")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AgencyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6900),
                            FirstName = "All",
                            LanguagePreference = "en-CA",
                            LastName = "All",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6900),
                            RowVer = 0L
                        });
                });

            modelBuilder.Entity("Server.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<long>("RowVer")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6810),
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6810),
                            RoleId = 1,
                            RowVer = 0L,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6820),
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6820),
                            RoleId = 1,
                            RowVer = 0L,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6820),
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6820),
                            RoleId = 2,
                            RowVer = 0L,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6820),
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6820),
                            RoleId = 3,
                            RowVer = 0L,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Server.Models.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RowVer")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6280),
                            Description = "Active",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6280),
                            RowVer = 0L
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6280),
                            Description = "Pending",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6280),
                            RowVer = 0L
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6280),
                            Description = "Locked",
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 3, 12, 24, 13, 765, DateTimeKind.Utc).AddTicks(6280),
                            RowVer = 0L
                        });
                });

            modelBuilder.Entity("Server.Models.Agency", b =>
                {
                    b.HasOne("Server.Models.AgencyStatus", "AgencyStatus")
                        .WithMany()
                        .HasForeignKey("AgencyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencyStatus");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.HasOne("Server.Models.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("Server.Models.UserProfile", b =>
                {
                    b.HasOne("Server.Models.Agency", "Agency")
                        .WithMany("Users")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Server.Models.UserRole", b =>
                {
                    b.HasOne("Server.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Agency", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
